in server folder:

npm i
node index.js

in webservice folder:
npm i
npm run dev





=====================================

1. What Is a Web Service?
2. Explain Architecture of web services w. r. to Provider, Requestor, Service registry and
Broker?
3. What is WSDL?
4. List types of Web services?
5. Differentiate between SOAP and REST?
6. List the examples of web services?
7. List applications of web services?

What Is a Web Service?
A web service is a software system designed to enable interoperable communication between different applications over a network. It provides a standard way for different software applications to communicate with each other, regardless of the programming languages, platforms, or technologies they are built on.


Explain Architecture of web services w. r. to Provider, Requestor, Service registry, and Broker?
Provider: The provider is the entity that hosts the web service. It exposes the functionality of the service and makes it available for use by other applications.
Requestor: The requestor is the entity that consumes or uses the functionality provided by the web service. It sends requests to the service and receives responses.
Service Registry: The service registry is a directory or repository that stores metadata and information about available web services. It helps requestors discover and locate the services they need.
Broker: The broker acts as an intermediary between requestors and providers. It facilitates the discovery, selection, and invocation of web services by matching requestors' requirements with available services in the registry.


What is WSDL?
WSDL (Web Services Description Language) is an XML-based language used to describe the interface and functionality of a web service. It defines the operations supported by the service, the data types used, and the communication protocols to be used for interacting with the service.


List types of Web services?
There are primarily two types of web services:
SOAP-based Web Services: SOAP (Simple Object Access Protocol) is a protocol used for exchanging structured information between web services over a network. SOAP web services use XML for message format and often rely on other standards such as WSDL and UDDI.
RESTful Web Services: REST (Representational State Transfer) is an architectural style for designing networked applications. RESTful web services use standard HTTP methods (GET, POST, PUT, DELETE) to perform CRUD (Create, Read, Update, Delete) operations on resources, and they typically use JSON or XML for message format.



Differentiate between SOAP and REST?
SOAP (Simple Object Access Protocol):
Protocol: SOAP is a protocol.
Message Format: SOAP messages are formatted using XML.
Standards: SOAP relies on other standards such as WSDL and UDDI.
Communication: SOAP can use any transport protocol, including HTTP, SMTP, and more.
Complexity: SOAP can be more complex due to its extensive standardization and support for features like security and transactions.
REST (Representational State Transfer):
Architectural Style: REST is an architectural style.
Message Format: RESTful services often use JSON or XML for message format.
Standards: REST is simpler and does not rely on additional standards like SOAP.
Communication: RESTful services primarily use HTTP as the communication protocol.
Simplicity: REST is simpler and more lightweight compared to SOAP.


List the examples of web services?
Examples of web services include:
Payment gateways like PayPal and Stripe
Social media APIs like Twitter API and Facebook Graph API
Weather data services like OpenWeatherMap API
E-commerce platforms like Amazon Web Services (AWS) APIs
Mapping and geolocation services like Google Maps API


List applications of web services?
Web services find applications in various domains, including:
E-commerce: Integrating payment gateways, order processing, and inventory management.
Social media: Accessing user data, posting updates, and retrieving feeds.
Enterprise integration: Connecting different systems within an organization for data exchange and workflow automation.
Mobile applications: Providing backend services for mobile apps, such as user authentication, data synchronization, and push notifications.
IoT (Internet of Things): Integrating sensors, devices, and applications for data collection, analysis, and control.



